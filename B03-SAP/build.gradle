buildscript {
	repositories {
		maven{url "http://maven.aliyun.com/nexus/content/groups/public"}
	}
}

plugins {
	id 'org.springframework.boot' version '1.5.1.RELEASE'
	id "com.moowork.node" version "1.1.1"
}

apply plugin: 'java'
//apply plugin: 'war'
apply plugin: 'maven-publish'	// 发布Jar包插件
apply plugin: 'project-report'

// 配置springBoot插件
springBoot {
    // 指定SpringBoot启动类
	// mainClass = 'com.comtop.DartApplication'
}

node {
  // Version of node to use.
  // version = '0.11.10'

  // Version of npm to use.
  // npmVersion = '2.1.5'

  // Version of Yarn to use.
  // yarnVersion = '0.16.1'

  // Base URL for fetching node distributions (change if you have a mirror).
  // distBaseUrl = 'https://nodejs.org/dist'

  // If true, it will download node using above parameters.
  // If false, it will try to use globally installed node.
  download = false

  // Set the work directory for unpacking node
  workDir = file("${project.buildDir}/nodejs")

  // Set the work directory for NPM
  // npmWorkDir = file("${project.projectDir}/src/main/ui/")

  // Set the work directory for Yarn
  yarnWorkDir = file("${project.buildDir}/yarn")

  // Set the work directory where node_modules should be located
  nodeModulesDir = file("${project.projectDir}")
}

repositories {
//    jcenter()
	mavenLocal()
	maven{url "http://maven.aliyun.com/nexus/content/groups/public"}
}

task gulpDev(type: NpmTask) {
  // install the express package only
  args = ['run', 'dev']
}

task gulpBuild(type: NpmTask) {
  // install the express package only
  args = ['run', 'build']
}

processResources.dependsOn(gulpBuild)

dependencies {
	
	compile('org.springframework.boot:spring-boot-starter')
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile("org.springframework.boot:spring-boot-starter-web")
	
	runtime('org.springframework.boot:spring-boot-devtools')
    testCompile('org.springframework.boot:spring-boot-starter-test')
}

ext {
	artifactId = project.name
}

task sourceJar(type: Jar) {
	from sourceSets.main.allJava
	baseName project.artifactId
	classifier "sources"
}

group = 'org.yancey'
version = '1.0'
// 运行publish命令发布到jar到指定中央仓库，运行publishToMavenLocal命令发布到本地maven仓库
publishing {
	publications {
		pb(MavenPublication) { // 运行publishToMavenLocal命令
			artifactId project.artifactId
			from components.java
			artifact sourceJar
			pom.withXml {
				def root = asNode()
			}
		}
	}
}